
stm32f407xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dbc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f64  08000f64  00020430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f64  08000f64  00020430  2**0
                  CONTENTS
  4 .ARM          00000000  08000f64  08000f64  00020430  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f64  08000f64  00020430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f64  08000f64  00010f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f68  08000f68  00010f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000430  20000000  08000f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000430  0800139c  00020430  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  0800139c  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY
 12 .debug_line   00001a90  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00001eba  00000000  00000000  00021ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000059f  00000000  00000000  00023daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000198  00000000  00000000  00024350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000be4e  00000000  00000000  000244e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000168  00000000  00000000  00030338  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00002f7b  00000000  00000000  000304a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003341b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000057c  00000000  00000000  00033498  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000430 	.word	0x20000430
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000f4c 	.word	0x08000f4c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000434 	.word	0x20000434
 80001e4:	08000f4c 	.word	0x08000f4c

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001f8:	480d      	ldr	r0, [pc, #52]	; (8000230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001fc:	480d      	ldr	r0, [pc, #52]	; (8000234 <LoopForever+0x6>)
  ldr r1, =_edata
 80001fe:	490e      	ldr	r1, [pc, #56]	; (8000238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000200:	4a0e      	ldr	r2, [pc, #56]	; (800023c <LoopForever+0xe>)
  movs r3, #0
 8000202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000204:	e002      	b.n	800020c <LoopCopyDataInit>

08000206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800020a:	3304      	adds	r3, #4

0800020c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800020c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800020e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000210:	d3f9      	bcc.n	8000206 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000212:	4a0b      	ldr	r2, [pc, #44]	; (8000240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000214:	4c0b      	ldr	r4, [pc, #44]	; (8000244 <LoopForever+0x16>)
  movs r3, #0
 8000216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000218:	e001      	b.n	800021e <LoopFillZerobss>

0800021a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800021a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800021c:	3204      	adds	r2, #4

0800021e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800021e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000220:	d3fb      	bcc.n	800021a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000222:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000226:	f000 fe6d 	bl	8000f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800022a:	f000 fe43 	bl	8000eb4 <main>

0800022e <LoopForever>:

LoopForever:
    b LoopForever
 800022e:	e7fe      	b.n	800022e <LoopForever>
  ldr   r0, =_estack
 8000230:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000238:	20000430 	.word	0x20000430
  ldr r2, =_sidata
 800023c:	08000f6c 	.word	0x08000f6c
  ldr r2, =_sbss
 8000240:	20000430 	.word	0x20000430
  ldr r4, =_ebss
 8000244:	20000470 	.word	0x20000470

08000248 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000248:	e7fe      	b.n	8000248 <ADC_IRQHandler>
	...

0800024c <GPIO_PeriClockControl>:
 *
 *  @Note			-	none
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	460b      	mov	r3, r1
 8000256:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000258:	78fb      	ldrb	r3, [r7, #3]
 800025a:	2b01      	cmp	r3, #1
 800025c:	d162      	bne.n	8000324 <GPIO_PeriClockControl+0xd8>

		if(pGPIOx == GPIOA)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4a64      	ldr	r2, [pc, #400]	; (80003f4 <GPIO_PeriClockControl+0x1a8>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d106      	bne.n	8000274 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000266:	4b64      	ldr	r3, [pc, #400]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 8000268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026a:	4a63      	ldr	r2, [pc, #396]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 800026c:	f043 0301 	orr.w	r3, r3, #1
 8000270:	6313      	str	r3, [r2, #48]	; 0x30
		}else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000272:	e0b9      	b.n	80003e8 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4a61      	ldr	r2, [pc, #388]	; (80003fc <GPIO_PeriClockControl+0x1b0>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d106      	bne.n	800028a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800027c:	4b5e      	ldr	r3, [pc, #376]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000280:	4a5d      	ldr	r2, [pc, #372]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 8000282:	f043 0302 	orr.w	r3, r3, #2
 8000286:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000288:	e0ae      	b.n	80003e8 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4a5c      	ldr	r2, [pc, #368]	; (8000400 <GPIO_PeriClockControl+0x1b4>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d106      	bne.n	80002a0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000292:	4b59      	ldr	r3, [pc, #356]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 8000294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000296:	4a58      	ldr	r2, [pc, #352]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 8000298:	f043 0304 	orr.w	r3, r3, #4
 800029c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800029e:	e0a3      	b.n	80003e8 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4a58      	ldr	r2, [pc, #352]	; (8000404 <GPIO_PeriClockControl+0x1b8>)
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d106      	bne.n	80002b6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80002a8:	4b53      	ldr	r3, [pc, #332]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ac:	4a52      	ldr	r2, [pc, #328]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 80002ae:	f043 0308 	orr.w	r3, r3, #8
 80002b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002b4:	e098      	b.n	80003e8 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4a53      	ldr	r2, [pc, #332]	; (8000408 <GPIO_PeriClockControl+0x1bc>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d106      	bne.n	80002cc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80002be:	4b4e      	ldr	r3, [pc, #312]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c2:	4a4d      	ldr	r2, [pc, #308]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 80002c4:	f043 0310 	orr.w	r3, r3, #16
 80002c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ca:	e08d      	b.n	80003e8 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a4f      	ldr	r2, [pc, #316]	; (800040c <GPIO_PeriClockControl+0x1c0>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d106      	bne.n	80002e2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80002d4:	4b48      	ldr	r3, [pc, #288]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d8:	4a47      	ldr	r2, [pc, #284]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 80002da:	f043 0320 	orr.w	r3, r3, #32
 80002de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e0:	e082      	b.n	80003e8 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a4a      	ldr	r2, [pc, #296]	; (8000410 <GPIO_PeriClockControl+0x1c4>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d106      	bne.n	80002f8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80002ea:	4b43      	ldr	r3, [pc, #268]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 80002ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ee:	4a42      	ldr	r2, [pc, #264]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 80002f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f6:	e077      	b.n	80003e8 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a46      	ldr	r2, [pc, #280]	; (8000414 <GPIO_PeriClockControl+0x1c8>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d106      	bne.n	800030e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000300:	4b3d      	ldr	r3, [pc, #244]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000304:	4a3c      	ldr	r2, [pc, #240]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 8000306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800030a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800030c:	e06c      	b.n	80003e8 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4a41      	ldr	r2, [pc, #260]	; (8000418 <GPIO_PeriClockControl+0x1cc>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d168      	bne.n	80003e8 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000316:	4b38      	ldr	r3, [pc, #224]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 8000318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031a:	4a37      	ldr	r2, [pc, #220]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 800031c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000320:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000322:	e061      	b.n	80003e8 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a33      	ldr	r2, [pc, #204]	; (80003f4 <GPIO_PeriClockControl+0x1a8>)
 8000328:	4293      	cmp	r3, r2
 800032a:	d106      	bne.n	800033a <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 800032c:	4b32      	ldr	r3, [pc, #200]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 800032e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000330:	4a31      	ldr	r2, [pc, #196]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 8000332:	f023 0301 	bic.w	r3, r3, #1
 8000336:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000338:	e056      	b.n	80003e8 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a2f      	ldr	r2, [pc, #188]	; (80003fc <GPIO_PeriClockControl+0x1b0>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d106      	bne.n	8000350 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000342:	4b2d      	ldr	r3, [pc, #180]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 8000344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000346:	4a2c      	ldr	r2, [pc, #176]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 8000348:	f023 0302 	bic.w	r3, r3, #2
 800034c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034e:	e04b      	b.n	80003e8 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a2b      	ldr	r2, [pc, #172]	; (8000400 <GPIO_PeriClockControl+0x1b4>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d106      	bne.n	8000366 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000358:	4b27      	ldr	r3, [pc, #156]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 800035a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035c:	4a26      	ldr	r2, [pc, #152]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 800035e:	f023 0304 	bic.w	r3, r3, #4
 8000362:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000364:	e040      	b.n	80003e8 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a26      	ldr	r2, [pc, #152]	; (8000404 <GPIO_PeriClockControl+0x1b8>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800036e:	4b22      	ldr	r3, [pc, #136]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000372:	4a21      	ldr	r2, [pc, #132]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 8000374:	f023 0308 	bic.w	r3, r3, #8
 8000378:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037a:	e035      	b.n	80003e8 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a22      	ldr	r2, [pc, #136]	; (8000408 <GPIO_PeriClockControl+0x1bc>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d106      	bne.n	8000392 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000384:	4b1c      	ldr	r3, [pc, #112]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000388:	4a1b      	ldr	r2, [pc, #108]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 800038a:	f023 0310 	bic.w	r3, r3, #16
 800038e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000390:	e02a      	b.n	80003e8 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a1d      	ldr	r2, [pc, #116]	; (800040c <GPIO_PeriClockControl+0x1c0>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 800039a:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039e:	4a16      	ldr	r2, [pc, #88]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 80003a0:	f023 0320 	bic.w	r3, r3, #32
 80003a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a6:	e01f      	b.n	80003e8 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a19      	ldr	r2, [pc, #100]	; (8000410 <GPIO_PeriClockControl+0x1c4>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d106      	bne.n	80003be <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b4:	4a10      	ldr	r2, [pc, #64]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 80003b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003bc:	e014      	b.n	80003e8 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a14      	ldr	r2, [pc, #80]	; (8000414 <GPIO_PeriClockControl+0x1c8>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d106      	bne.n	80003d4 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 80003cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d2:	e009      	b.n	80003e8 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a10      	ldr	r2, [pc, #64]	; (8000418 <GPIO_PeriClockControl+0x1cc>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d105      	bne.n	80003e8 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 80003de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e0:	4a05      	ldr	r2, [pc, #20]	; (80003f8 <GPIO_PeriClockControl+0x1ac>)
 80003e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	40020000 	.word	0x40020000
 80003f8:	40023800 	.word	0x40023800
 80003fc:	40020400 	.word	0x40020400
 8000400:	40020800 	.word	0x40020800
 8000404:	40020c00 	.word	0x40020c00
 8000408:	40021000 	.word	0x40021000
 800040c:	40021400 	.word	0x40021400
 8000410:	40021800 	.word	0x40021800
 8000414:	40021c00 	.word	0x40021c00
 8000418:	40022000 	.word	0x40022000

0800041c <GPIO_Init>:
 *
 *  @Note			-	none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	// temporary register
	uint32_t temp = 0;
 8000424:	2300      	movs	r3, #0
 8000426:	60fb      	str	r3, [r7, #12]

	// enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2101      	movs	r1, #1
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff ff0c 	bl	800024c <GPIO_PeriClockControl>

	//	1. configure the mode of GPIO pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	795b      	ldrb	r3, [r3, #5]
 8000438:	2b03      	cmp	r3, #3
 800043a:	d81f      	bhi.n	800047c <GPIO_Init+0x60>
	{
		// non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //	Multiply with 2 because each pin takes 2 bit fields in MODER register.
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	795b      	ldrb	r3, [r3, #5]
 8000440:	461a      	mov	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	791b      	ldrb	r3, [r3, #4]
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	fa02 f303 	lsl.w	r3, r2, r3
 800044c:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	791b      	ldrb	r3, [r3, #4]
 8000458:	4619      	mov	r1, r3
 800045a:	2303      	movs	r3, #3
 800045c:	408b      	lsls	r3, r1
 800045e:	43db      	mvns	r3, r3
 8000460:	4619      	mov	r1, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	400a      	ands	r2, r1
 8000468:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	6819      	ldr	r1, [r3, #0]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	68fa      	ldr	r2, [r7, #12]
 8000476:	430a      	orrs	r2, r1
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	e0ca      	b.n	8000612 <GPIO_Init+0x1f6>

	}else
	{
		// interrupt mode
		if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT )
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	795b      	ldrb	r3, [r3, #5]
 8000480:	2b04      	cmp	r3, #4
 8000482:	d117      	bne.n	80004b4 <GPIO_Init+0x98>
		{
			// configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000484:	4b4a      	ldr	r3, [pc, #296]	; (80005b0 <GPIO_Init+0x194>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	7912      	ldrb	r2, [r2, #4]
 800048c:	4611      	mov	r1, r2
 800048e:	2201      	movs	r2, #1
 8000490:	408a      	lsls	r2, r1
 8000492:	4611      	mov	r1, r2
 8000494:	4a46      	ldr	r2, [pc, #280]	; (80005b0 <GPIO_Init+0x194>)
 8000496:	430b      	orrs	r3, r1
 8000498:	60d3      	str	r3, [r2, #12]

			//clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800049a:	4b45      	ldr	r3, [pc, #276]	; (80005b0 <GPIO_Init+0x194>)
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	7912      	ldrb	r2, [r2, #4]
 80004a2:	4611      	mov	r1, r2
 80004a4:	2201      	movs	r2, #1
 80004a6:	408a      	lsls	r2, r1
 80004a8:	43d2      	mvns	r2, r2
 80004aa:	4611      	mov	r1, r2
 80004ac:	4a40      	ldr	r2, [pc, #256]	; (80005b0 <GPIO_Init+0x194>)
 80004ae:	400b      	ands	r3, r1
 80004b0:	6093      	str	r3, [r2, #8]
 80004b2:	e035      	b.n	8000520 <GPIO_Init+0x104>

		}else if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT )
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	795b      	ldrb	r3, [r3, #5]
 80004b8:	2b05      	cmp	r3, #5
 80004ba:	d117      	bne.n	80004ec <GPIO_Init+0xd0>
		{
			// configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80004bc:	4b3c      	ldr	r3, [pc, #240]	; (80005b0 <GPIO_Init+0x194>)
 80004be:	689b      	ldr	r3, [r3, #8]
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	7912      	ldrb	r2, [r2, #4]
 80004c4:	4611      	mov	r1, r2
 80004c6:	2201      	movs	r2, #1
 80004c8:	408a      	lsls	r2, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a38      	ldr	r2, [pc, #224]	; (80005b0 <GPIO_Init+0x194>)
 80004ce:	430b      	orrs	r3, r1
 80004d0:	6093      	str	r3, [r2, #8]

			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80004d2:	4b37      	ldr	r3, [pc, #220]	; (80005b0 <GPIO_Init+0x194>)
 80004d4:	68db      	ldr	r3, [r3, #12]
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	7912      	ldrb	r2, [r2, #4]
 80004da:	4611      	mov	r1, r2
 80004dc:	2201      	movs	r2, #1
 80004de:	408a      	lsls	r2, r1
 80004e0:	43d2      	mvns	r2, r2
 80004e2:	4611      	mov	r1, r2
 80004e4:	4a32      	ldr	r2, [pc, #200]	; (80005b0 <GPIO_Init+0x194>)
 80004e6:	400b      	ands	r3, r1
 80004e8:	60d3      	str	r3, [r2, #12]
 80004ea:	e019      	b.n	8000520 <GPIO_Init+0x104>

		}else if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	795b      	ldrb	r3, [r3, #5]
 80004f0:	2b06      	cmp	r3, #6
 80004f2:	d115      	bne.n	8000520 <GPIO_Init+0x104>
		{
			// configure both FTSR and RTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80004f4:	4b2e      	ldr	r3, [pc, #184]	; (80005b0 <GPIO_Init+0x194>)
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	7912      	ldrb	r2, [r2, #4]
 80004fc:	4611      	mov	r1, r2
 80004fe:	2201      	movs	r2, #1
 8000500:	408a      	lsls	r2, r1
 8000502:	4611      	mov	r1, r2
 8000504:	4a2a      	ldr	r2, [pc, #168]	; (80005b0 <GPIO_Init+0x194>)
 8000506:	430b      	orrs	r3, r1
 8000508:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800050a:	4b29      	ldr	r3, [pc, #164]	; (80005b0 <GPIO_Init+0x194>)
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	7912      	ldrb	r2, [r2, #4]
 8000512:	4611      	mov	r1, r2
 8000514:	2201      	movs	r2, #1
 8000516:	408a      	lsls	r2, r1
 8000518:	4611      	mov	r1, r2
 800051a:	4a25      	ldr	r2, [pc, #148]	; (80005b0 <GPIO_Init+0x194>)
 800051c:	430b      	orrs	r3, r1
 800051e:	6093      	str	r3, [r2, #8]
		}

		// configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) / 4;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	791b      	ldrb	r3, [r3, #4]
 8000524:	089b      	lsrs	r3, r3, #2
 8000526:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) % 4;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	f003 0303 	and.w	r3, r3, #3
 8000530:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a1f      	ldr	r2, [pc, #124]	; (80005b4 <GPIO_Init+0x198>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d04d      	beq.n	80005d8 <GPIO_Init+0x1bc>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a1d      	ldr	r2, [pc, #116]	; (80005b8 <GPIO_Init+0x19c>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d032      	beq.n	80005ac <GPIO_Init+0x190>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a1c      	ldr	r2, [pc, #112]	; (80005bc <GPIO_Init+0x1a0>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d02b      	beq.n	80005a8 <GPIO_Init+0x18c>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a1a      	ldr	r2, [pc, #104]	; (80005c0 <GPIO_Init+0x1a4>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d024      	beq.n	80005a4 <GPIO_Init+0x188>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a19      	ldr	r2, [pc, #100]	; (80005c4 <GPIO_Init+0x1a8>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d01d      	beq.n	80005a0 <GPIO_Init+0x184>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a17      	ldr	r2, [pc, #92]	; (80005c8 <GPIO_Init+0x1ac>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d016      	beq.n	800059c <GPIO_Init+0x180>
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a16      	ldr	r2, [pc, #88]	; (80005cc <GPIO_Init+0x1b0>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d00f      	beq.n	8000598 <GPIO_Init+0x17c>
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <GPIO_Init+0x1b4>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d008      	beq.n	8000594 <GPIO_Init+0x178>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <GPIO_Init+0x1b8>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d101      	bne.n	8000590 <GPIO_Init+0x174>
 800058c:	2308      	movs	r3, #8
 800058e:	e024      	b.n	80005da <GPIO_Init+0x1be>
 8000590:	2300      	movs	r3, #0
 8000592:	e022      	b.n	80005da <GPIO_Init+0x1be>
 8000594:	2307      	movs	r3, #7
 8000596:	e020      	b.n	80005da <GPIO_Init+0x1be>
 8000598:	2306      	movs	r3, #6
 800059a:	e01e      	b.n	80005da <GPIO_Init+0x1be>
 800059c:	2305      	movs	r3, #5
 800059e:	e01c      	b.n	80005da <GPIO_Init+0x1be>
 80005a0:	2304      	movs	r3, #4
 80005a2:	e01a      	b.n	80005da <GPIO_Init+0x1be>
 80005a4:	2303      	movs	r3, #3
 80005a6:	e018      	b.n	80005da <GPIO_Init+0x1be>
 80005a8:	2302      	movs	r3, #2
 80005aa:	e016      	b.n	80005da <GPIO_Init+0x1be>
 80005ac:	2301      	movs	r3, #1
 80005ae:	e014      	b.n	80005da <GPIO_Init+0x1be>
 80005b0:	40013c00 	.word	0x40013c00
 80005b4:	40020000 	.word	0x40020000
 80005b8:	40020400 	.word	0x40020400
 80005bc:	40020800 	.word	0x40020800
 80005c0:	40020c00 	.word	0x40020c00
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40021400 	.word	0x40021400
 80005cc:	40021800 	.word	0x40021800
 80005d0:	40021c00 	.word	0x40021c00
 80005d4:	40022000 	.word	0x40022000
 80005d8:	2300      	movs	r3, #0
 80005da:	727b      	strb	r3, [r7, #9]

		SYSCFG_PCLK_EN();
 80005dc:	4b65      	ldr	r3, [pc, #404]	; (8000774 <GPIO_Init+0x358>)
 80005de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e0:	4a64      	ldr	r2, [pc, #400]	; (8000774 <GPIO_Init+0x358>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e6:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( 4 * temp2 );
 80005e8:	7a7a      	ldrb	r2, [r7, #9]
 80005ea:	7abb      	ldrb	r3, [r7, #10]
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	fa02 f103 	lsl.w	r1, r2, r3
 80005f2:	4a61      	ldr	r2, [pc, #388]	; (8000778 <GPIO_Init+0x35c>)
 80005f4:	7afb      	ldrb	r3, [r7, #11]
 80005f6:	3302      	adds	r3, #2
 80005f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005fc:	4b5f      	ldr	r3, [pc, #380]	; (800077c <GPIO_Init+0x360>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	7912      	ldrb	r2, [r2, #4]
 8000604:	4611      	mov	r1, r2
 8000606:	2201      	movs	r2, #1
 8000608:	408a      	lsls	r2, r1
 800060a:	4611      	mov	r1, r2
 800060c:	4a5b      	ldr	r2, [pc, #364]	; (800077c <GPIO_Init+0x360>)
 800060e:	430b      	orrs	r3, r1
 8000610:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]

	//	2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	799b      	ldrb	r3, [r3, #6]
 800061a:	461a      	mov	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	791b      	ldrb	r3, [r3, #4]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	fa02 f303 	lsl.w	r3, r2, r3
 8000626:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	689a      	ldr	r2, [r3, #8]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	791b      	ldrb	r3, [r3, #4]
 8000632:	4619      	mov	r1, r3
 8000634:	2303      	movs	r3, #3
 8000636:	408b      	lsls	r3, r1
 8000638:	43db      	mvns	r3, r3
 800063a:	4619      	mov	r1, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	400a      	ands	r2, r1
 8000642:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	6899      	ldr	r1, [r3, #8]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	430a      	orrs	r2, r1
 8000652:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]

	//	3. configure the PUPD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	79db      	ldrb	r3, [r3, #7]
 800065c:	461a      	mov	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	791b      	ldrb	r3, [r3, #4]
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	fa02 f303 	lsl.w	r3, r2, r3
 8000668:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	68da      	ldr	r2, [r3, #12]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	4619      	mov	r1, r3
 8000676:	2303      	movs	r3, #3
 8000678:	408b      	lsls	r3, r1
 800067a:	43db      	mvns	r3, r3
 800067c:	4619      	mov	r1, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	400a      	ands	r2, r1
 8000684:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	68d9      	ldr	r1, [r3, #12]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	430a      	orrs	r2, r1
 8000694:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]

	//	4. configure the OPTYPE
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	7a1b      	ldrb	r3, [r3, #8]
 800069e:	461a      	mov	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	fa02 f303 	lsl.w	r3, r2, r3
 80006a8:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x01 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	685a      	ldr	r2, [r3, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	4619      	mov	r1, r3
 80006b6:	2301      	movs	r3, #1
 80006b8:	408b      	lsls	r3, r1
 80006ba:	43db      	mvns	r3, r3
 80006bc:	4619      	mov	r1, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	400a      	ands	r2, r1
 80006c4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	6859      	ldr	r1, [r3, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	430a      	orrs	r2, r1
 80006d4:	605a      	str	r2, [r3, #4]

	temp = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]

	//	5. configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	795b      	ldrb	r3, [r3, #5]
 80006de:	2b02      	cmp	r3, #2
 80006e0:	d144      	bne.n	800076c <GPIO_Init+0x350>
	{
		uint8_t temp1;

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber >= 8 )
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	2b07      	cmp	r3, #7
 80006e8:	d921      	bls.n	800072e <GPIO_Init+0x312>
		{
			temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	7a5b      	ldrb	r3, [r3, #9]
 80006ee:	461a      	mov	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	791b      	ldrb	r3, [r3, #4]
 80006f4:	3b08      	subs	r3, #8
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	fa02 f303 	lsl.w	r3, r2, r3
 80006fc:	723b      	strb	r3, [r7, #8]
			pGPIOHandle->pGPIOx->AFRH &= ~( 0xF << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8) );
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	791b      	ldrb	r3, [r3, #4]
 8000708:	3b08      	subs	r3, #8
 800070a:	210f      	movs	r1, #15
 800070c:	fa01 f303 	lsl.w	r3, r1, r3
 8000710:	43db      	mvns	r3, r3
 8000712:	4619      	mov	r1, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	400a      	ands	r2, r1
 800071a:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRH |= temp1;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000722:	7a3a      	ldrb	r2, [r7, #8]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	430a      	orrs	r2, r1
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRL &= ~( 0xF << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
			pGPIOHandle->pGPIOx->AFRL |= temp1;
		}
	}

}
 800072c:	e01e      	b.n	800076c <GPIO_Init+0x350>
			temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	7a5b      	ldrb	r3, [r3, #9]
 8000732:	461a      	mov	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	723b      	strb	r3, [r7, #8]
			pGPIOHandle->pGPIOx->AFRL &= ~( 0xF << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	6a1a      	ldr	r2, [r3, #32]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	4619      	mov	r1, r3
 800074c:	230f      	movs	r3, #15
 800074e:	408b      	lsls	r3, r1
 8000750:	43db      	mvns	r3, r3
 8000752:	4619      	mov	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	400a      	ands	r2, r1
 800075a:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= temp1;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	6a19      	ldr	r1, [r3, #32]
 8000762:	7a3a      	ldrb	r2, [r7, #8]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	430a      	orrs	r2, r1
 800076a:	621a      	str	r2, [r3, #32]
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40013800 	.word	0x40013800
 800077c:	40013c00 	.word	0x40013c00

08000780 <GPIO_ReadFromInputPin>:
 *
 *  @Note			-	none
 *
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	691a      	ldr	r2, [r3, #16]
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	fa22 f303 	lsr.w	r3, r2, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	73fb      	strb	r3, [r7, #15]

	return value;
 800079e:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <RCC_GetPLLOutputClock>:
 *
 *  @Note			-	none
 *
 */
uint32_t RCC_GetPLLOutputClock()
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	// it can be implemented to calculate PLL output clock
	return;
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <RCC_GetPCLK1Value>:
 *
 *  @Note			-	none
 *
 */
uint32_t RCC_GetPCLK1Value(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
	uint32_t pCLK1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;

	// used clock source
	clksrc = (RCC->CFGR >> 2) & 0x03;	// to read 2nd and 3rd bits of RCC_CFGR register
 80007c6:	4b26      	ldr	r3, [pc, #152]	; (8000860 <RCC_GetPCLK1Value+0xa0>)
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	089b      	lsrs	r3, r3, #2
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	f003 0303 	and.w	r3, r3, #3
 80007d2:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 80007d4:	7a7b      	ldrb	r3, [r7, #9]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d102      	bne.n	80007e0 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <RCC_GetPCLK1Value+0xa4>)
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	e00b      	b.n	80007f8 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 80007e0:	7a7b      	ldrb	r3, [r7, #9]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d102      	bne.n	80007ec <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <RCC_GetPCLK1Value+0xa8>)
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	e005      	b.n	80007f8 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2)
 80007ec:	7a7b      	ldrb	r3, [r7, #9]
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d102      	bne.n	80007f8 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 80007f2:	f7ff ffdb 	bl	80007ac <RCC_GetPLLOutputClock>
 80007f6:	60f8      	str	r0, [r7, #12]
	}

	// according to HPRE bit of RCC_CFGR for AHB
	temp = (RCC->CFGR >> 4) & 0xF;
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <RCC_GetPCLK1Value+0xa0>)
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	091b      	lsrs	r3, r3, #4
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	f003 030f 	and.w	r3, r3, #15
 8000804:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000806:	7a3b      	ldrb	r3, [r7, #8]
 8000808:	2b07      	cmp	r3, #7
 800080a:	d802      	bhi.n	8000812 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1; 			// AHB bus prescaler value
 800080c:	2301      	movs	r3, #1
 800080e:	72fb      	strb	r3, [r7, #11]
 8000810:	e005      	b.n	800081e <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000812:	7a3b      	ldrb	r3, [r7, #8]
 8000814:	3b08      	subs	r3, #8
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <RCC_GetPCLK1Value+0xac>)
 8000818:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800081c:	72fb      	strb	r3, [r7, #11]
	}

	// according to HPRE bit of RCC_CFGR for APB
	temp = (RCC->CFGR >> 10) & 0x07;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <RCC_GetPCLK1Value+0xa0>)
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	0a9b      	lsrs	r3, r3, #10
 8000824:	b2db      	uxtb	r3, r3
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	723b      	strb	r3, [r7, #8]

	if (temp < 4)
 800082c:	7a3b      	ldrb	r3, [r7, #8]
 800082e:	2b03      	cmp	r3, #3
 8000830:	d802      	bhi.n	8000838 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1; 			// APB1 bus prescaler value
 8000832:	2301      	movs	r3, #1
 8000834:	72bb      	strb	r3, [r7, #10]
 8000836:	e005      	b.n	8000844 <RCC_GetPCLK1Value+0x84>
	} else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000838:	7a3b      	ldrb	r3, [r7, #8]
 800083a:	3b04      	subs	r3, #4
 800083c:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <RCC_GetPCLK1Value+0xb0>)
 800083e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000842:	72bb      	strb	r3, [r7, #10]
	}

	pCLK1 = (SystemClk / ahbp) / apb1p;
 8000844:	7afb      	ldrb	r3, [r7, #11]
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	fbb2 f2f3 	udiv	r2, r2, r3
 800084c:	7abb      	ldrb	r3, [r7, #10]
 800084e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000852:	607b      	str	r3, [r7, #4]

	return pCLK1;
 8000854:	687b      	ldr	r3, [r7, #4]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	00f42400 	.word	0x00f42400
 8000868:	007a1200 	.word	0x007a1200
 800086c:	20000000 	.word	0x20000000
 8000870:	20000010 	.word	0x20000010

08000874 <RCC_GetPCLK2Value>:
 *
 *  @Note			-	none
 *
 */
uint32_t RCC_GetPCLK2Value(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
	uint32_t pCLK2, SystemClk;

	uint8_t clksrc, temp, ahbp, apb2p;

	// used clock source
	clksrc = (RCC->CFGR >> 2) & 0x03;	// to read 2nd and 3rd bits of RCC_CFGR register
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <RCC_GetPCLK2Value+0xa0>)
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	089b      	lsrs	r3, r3, #2
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f003 0303 	and.w	r3, r3, #3
 8000886:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8000888:	7a7b      	ldrb	r3, [r7, #9]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d102      	bne.n	8000894 <RCC_GetPCLK2Value+0x20>
	{
		SystemClk = 16000000;
 800088e:	4b22      	ldr	r3, [pc, #136]	; (8000918 <RCC_GetPCLK2Value+0xa4>)
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	e00b      	b.n	80008ac <RCC_GetPCLK2Value+0x38>
	}else if(clksrc == 1)
 8000894:	7a7b      	ldrb	r3, [r7, #9]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d102      	bne.n	80008a0 <RCC_GetPCLK2Value+0x2c>
	{
		SystemClk = 8000000;
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <RCC_GetPCLK2Value+0xa8>)
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	e005      	b.n	80008ac <RCC_GetPCLK2Value+0x38>
	}else if(clksrc == 2)
 80008a0:	7a7b      	ldrb	r3, [r7, #9]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d102      	bne.n	80008ac <RCC_GetPCLK2Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 80008a6:	f7ff ff81 	bl	80007ac <RCC_GetPLLOutputClock>
 80008aa:	60f8      	str	r0, [r7, #12]
	}

	// according to HPRE bit of RCC_CFGR for AHB
	temp = (RCC->CFGR >> 4) & 0xF;
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <RCC_GetPCLK2Value+0xa0>)
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	091b      	lsrs	r3, r3, #4
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	f003 030f 	and.w	r3, r3, #15
 80008b8:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 80008ba:	7a3b      	ldrb	r3, [r7, #8]
 80008bc:	2b07      	cmp	r3, #7
 80008be:	d802      	bhi.n	80008c6 <RCC_GetPCLK2Value+0x52>
	{
		ahbp = 1; 			// AHB bus prescaler value
 80008c0:	2301      	movs	r3, #1
 80008c2:	72fb      	strb	r3, [r7, #11]
 80008c4:	e005      	b.n	80008d2 <RCC_GetPCLK2Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 80008c6:	7a3b      	ldrb	r3, [r7, #8]
 80008c8:	3b08      	subs	r3, #8
 80008ca:	4a15      	ldr	r2, [pc, #84]	; (8000920 <RCC_GetPCLK2Value+0xac>)
 80008cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008d0:	72fb      	strb	r3, [r7, #11]
	}

	// according to HPRE bit of RCC_CFGR for APB
	temp = (RCC->CFGR >> 13) & 0x07;
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <RCC_GetPCLK2Value+0xa0>)
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	0b5b      	lsrs	r3, r3, #13
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	723b      	strb	r3, [r7, #8]

	if (temp < 4)
 80008e0:	7a3b      	ldrb	r3, [r7, #8]
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d802      	bhi.n	80008ec <RCC_GetPCLK2Value+0x78>
	{
		apb2p = 1; 			// APB2 bus prescaler value
 80008e6:	2301      	movs	r3, #1
 80008e8:	72bb      	strb	r3, [r7, #10]
 80008ea:	e005      	b.n	80008f8 <RCC_GetPCLK2Value+0x84>
	} else
	{
		apb2p = APB2_PreScaler[temp-4];
 80008ec:	7a3b      	ldrb	r3, [r7, #8]
 80008ee:	3b04      	subs	r3, #4
 80008f0:	4a0c      	ldr	r2, [pc, #48]	; (8000924 <RCC_GetPCLK2Value+0xb0>)
 80008f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008f6:	72bb      	strb	r3, [r7, #10]
	}

	pCLK2 = (SystemClk / ahbp) / apb2p;
 80008f8:	7afb      	ldrb	r3, [r7, #11]
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000900:	7abb      	ldrb	r3, [r7, #10]
 8000902:	fbb2 f3f3 	udiv	r3, r2, r3
 8000906:	607b      	str	r3, [r7, #4]

	return pCLK2;
 8000908:	687b      	ldr	r3, [r7, #4]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	00f42400 	.word	0x00f42400
 800091c:	007a1200 	.word	0x007a1200
 8000920:	20000000 	.word	0x20000000
 8000924:	20000020 	.word	0x20000020

08000928 <USART_PeriClockControl>:
 *
 *  @Note			-	none
 *
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000934:	78fb      	ldrb	r3, [r7, #3]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d157      	bne.n	80009ea <USART_PeriClockControl+0xc2>
	{
		if (pUSARTx == USART1)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a59      	ldr	r2, [pc, #356]	; (8000aa4 <USART_PeriClockControl+0x17c>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d106      	bne.n	8000950 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000942:	4b59      	ldr	r3, [pc, #356]	; (8000aa8 <USART_PeriClockControl+0x180>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a58      	ldr	r2, [pc, #352]	; (8000aa8 <USART_PeriClockControl+0x180>)
 8000948:	f043 0310 	orr.w	r3, r3, #16
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
		} else if (pUSARTx == UART8)
		{
			UART8_PCLK_DI();
		}
	}
}
 800094e:	e0a3      	b.n	8000a98 <USART_PeriClockControl+0x170>
		} else if (pUSARTx == USART2)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a56      	ldr	r2, [pc, #344]	; (8000aac <USART_PeriClockControl+0x184>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d106      	bne.n	8000966 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000958:	4b53      	ldr	r3, [pc, #332]	; (8000aa8 <USART_PeriClockControl+0x180>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	4a52      	ldr	r2, [pc, #328]	; (8000aa8 <USART_PeriClockControl+0x180>)
 800095e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000962:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000964:	e098      	b.n	8000a98 <USART_PeriClockControl+0x170>
		} else if (pUSARTx == USART3)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a51      	ldr	r2, [pc, #324]	; (8000ab0 <USART_PeriClockControl+0x188>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d106      	bne.n	800097c <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 800096e:	4b4e      	ldr	r3, [pc, #312]	; (8000aa8 <USART_PeriClockControl+0x180>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a4d      	ldr	r2, [pc, #308]	; (8000aa8 <USART_PeriClockControl+0x180>)
 8000974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
}
 800097a:	e08d      	b.n	8000a98 <USART_PeriClockControl+0x170>
		} else if (pUSARTx == UART4)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a4d      	ldr	r2, [pc, #308]	; (8000ab4 <USART_PeriClockControl+0x18c>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d106      	bne.n	8000992 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000984:	4b48      	ldr	r3, [pc, #288]	; (8000aa8 <USART_PeriClockControl+0x180>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	4a47      	ldr	r2, [pc, #284]	; (8000aa8 <USART_PeriClockControl+0x180>)
 800098a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800098e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000990:	e082      	b.n	8000a98 <USART_PeriClockControl+0x170>
		} else if (pUSARTx == UART5)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a48      	ldr	r2, [pc, #288]	; (8000ab8 <USART_PeriClockControl+0x190>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d106      	bne.n	80009a8 <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 800099a:	4b43      	ldr	r3, [pc, #268]	; (8000aa8 <USART_PeriClockControl+0x180>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a42      	ldr	r2, [pc, #264]	; (8000aa8 <USART_PeriClockControl+0x180>)
 80009a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009a6:	e077      	b.n	8000a98 <USART_PeriClockControl+0x170>
		} else if (pUSARTx == USART6)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a44      	ldr	r2, [pc, #272]	; (8000abc <USART_PeriClockControl+0x194>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d106      	bne.n	80009be <USART_PeriClockControl+0x96>
			USART6_PCLK_EN();
 80009b0:	4b3d      	ldr	r3, [pc, #244]	; (8000aa8 <USART_PeriClockControl+0x180>)
 80009b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b4:	4a3c      	ldr	r2, [pc, #240]	; (8000aa8 <USART_PeriClockControl+0x180>)
 80009b6:	f043 0320 	orr.w	r3, r3, #32
 80009ba:	6453      	str	r3, [r2, #68]	; 0x44
}
 80009bc:	e06c      	b.n	8000a98 <USART_PeriClockControl+0x170>
		} else if (pUSARTx == UART7)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a3f      	ldr	r2, [pc, #252]	; (8000ac0 <USART_PeriClockControl+0x198>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d106      	bne.n	80009d4 <USART_PeriClockControl+0xac>
			UART7_PCLK_EN();
 80009c6:	4b38      	ldr	r3, [pc, #224]	; (8000aa8 <USART_PeriClockControl+0x180>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a37      	ldr	r2, [pc, #220]	; (8000aa8 <USART_PeriClockControl+0x180>)
 80009cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009d2:	e061      	b.n	8000a98 <USART_PeriClockControl+0x170>
		} else if (pUSARTx == UART8)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a3b      	ldr	r2, [pc, #236]	; (8000ac4 <USART_PeriClockControl+0x19c>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d15d      	bne.n	8000a98 <USART_PeriClockControl+0x170>
			UART8_PCLK_EN();
 80009dc:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <USART_PeriClockControl+0x180>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	4a31      	ldr	r2, [pc, #196]	; (8000aa8 <USART_PeriClockControl+0x180>)
 80009e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009e8:	e056      	b.n	8000a98 <USART_PeriClockControl+0x170>
		if (pUSARTx == USART1)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a2d      	ldr	r2, [pc, #180]	; (8000aa4 <USART_PeriClockControl+0x17c>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d106      	bne.n	8000a00 <USART_PeriClockControl+0xd8>
			USART1_PCLK_DI();
 80009f2:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <USART_PeriClockControl+0x180>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a2c      	ldr	r2, [pc, #176]	; (8000aa8 <USART_PeriClockControl+0x180>)
 80009f8:	f023 0310 	bic.w	r3, r3, #16
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
}
 80009fe:	e04b      	b.n	8000a98 <USART_PeriClockControl+0x170>
		} else if (pUSARTx == USART2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a2a      	ldr	r2, [pc, #168]	; (8000aac <USART_PeriClockControl+0x184>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d106      	bne.n	8000a16 <USART_PeriClockControl+0xee>
			USART2_PCLK_DI();
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <USART_PeriClockControl+0x180>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4a26      	ldr	r2, [pc, #152]	; (8000aa8 <USART_PeriClockControl+0x180>)
 8000a0e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a14:	e040      	b.n	8000a98 <USART_PeriClockControl+0x170>
		} else if (pUSARTx == USART3)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a25      	ldr	r2, [pc, #148]	; (8000ab0 <USART_PeriClockControl+0x188>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d106      	bne.n	8000a2c <USART_PeriClockControl+0x104>
			USART3_PCLK_DI();
 8000a1e:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <USART_PeriClockControl+0x180>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <USART_PeriClockControl+0x180>)
 8000a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a2a:	e035      	b.n	8000a98 <USART_PeriClockControl+0x170>
		} else if (pUSARTx == UART4)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a21      	ldr	r2, [pc, #132]	; (8000ab4 <USART_PeriClockControl+0x18c>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d106      	bne.n	8000a42 <USART_PeriClockControl+0x11a>
			UART4_PCLK_DI();
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <USART_PeriClockControl+0x180>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	4a1b      	ldr	r2, [pc, #108]	; (8000aa8 <USART_PeriClockControl+0x180>)
 8000a3a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000a3e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a40:	e02a      	b.n	8000a98 <USART_PeriClockControl+0x170>
		} else if (pUSARTx == UART5)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a1c      	ldr	r2, [pc, #112]	; (8000ab8 <USART_PeriClockControl+0x190>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d106      	bne.n	8000a58 <USART_PeriClockControl+0x130>
			UART5_PCLK_DI();
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <USART_PeriClockControl+0x180>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a16      	ldr	r2, [pc, #88]	; (8000aa8 <USART_PeriClockControl+0x180>)
 8000a50:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a56:	e01f      	b.n	8000a98 <USART_PeriClockControl+0x170>
		} else if (pUSARTx == USART6)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a18      	ldr	r2, [pc, #96]	; (8000abc <USART_PeriClockControl+0x194>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d106      	bne.n	8000a6e <USART_PeriClockControl+0x146>
			USART6_PCLK_DI();
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <USART_PeriClockControl+0x180>)
 8000a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a64:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <USART_PeriClockControl+0x180>)
 8000a66:	f023 0320 	bic.w	r3, r3, #32
 8000a6a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a6c:	e014      	b.n	8000a98 <USART_PeriClockControl+0x170>
		} else if (pUSARTx == UART7)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a13      	ldr	r2, [pc, #76]	; (8000ac0 <USART_PeriClockControl+0x198>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d106      	bne.n	8000a84 <USART_PeriClockControl+0x15c>
			UART7_PCLK_DI();
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <USART_PeriClockControl+0x180>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <USART_PeriClockControl+0x180>)
 8000a7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a82:	e009      	b.n	8000a98 <USART_PeriClockControl+0x170>
		} else if (pUSARTx == UART8)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <USART_PeriClockControl+0x19c>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d105      	bne.n	8000a98 <USART_PeriClockControl+0x170>
			UART8_PCLK_DI();
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <USART_PeriClockControl+0x180>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <USART_PeriClockControl+0x180>)
 8000a92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	40011000 	.word	0x40011000
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40004400 	.word	0x40004400
 8000ab0:	40004800 	.word	0x40004800
 8000ab4:	40004c00 	.word	0x40004c00
 8000ab8:	40005000 	.word	0x40005000
 8000abc:	40011400 	.word	0x40011400
 8000ac0:	40007800 	.word	0x40007800
 8000ac4:	40007c00 	.word	0x40007c00

08000ac8 <USART_SetBaudRate>:
 *
 * @Note              - none

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	// variables to hold Mantissa and Fraction values
	uint32_t M_part, F_part;

	uint32_t tempreg = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]

	// get the value of APB bus clock in to the variable PCLKx
	if (pUSARTx == USART1 || pUSARTx == USART6)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a31      	ldr	r2, [pc, #196]	; (8000ba0 <USART_SetBaudRate+0xd8>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d003      	beq.n	8000ae6 <USART_SetBaudRate+0x1e>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a30      	ldr	r2, [pc, #192]	; (8000ba4 <USART_SetBaudRate+0xdc>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d103      	bne.n	8000aee <USART_SetBaudRate+0x26>
	{
		//USART1 and USART6 are hanging on APB2 bus
		PCLKx = RCC_GetPCLK2Value();
 8000ae6:	f7ff fec5 	bl	8000874 <RCC_GetPCLK2Value>
 8000aea:	61f8      	str	r0, [r7, #28]
 8000aec:	e002      	b.n	8000af4 <USART_SetBaudRate+0x2c>
	} else
	{
		PCLKx = RCC_GetPCLK1Value();
 8000aee:	f7ff fe67 	bl	80007c0 <RCC_GetPCLK1Value>
 8000af2:	61f8      	str	r0, [r7, #28]
	}

	// check for OVER8 configuration bit
	if (pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00b      	beq.n	8000b18 <USART_SetBaudRate+0x50>
	{
		//OVER8 = 1 , over sampling by 8
		usartdiv = ((25 * PCLKx) / (2 * BaudRate));
 8000b00:	69fa      	ldr	r2, [r7, #28]
 8000b02:	4613      	mov	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	4413      	add	r3, r2
 8000b08:	009a      	lsls	r2, r3, #2
 8000b0a:	441a      	add	r2, r3
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b14:	61bb      	str	r3, [r7, #24]
 8000b16:	e00a      	b.n	8000b2e <USART_SetBaudRate+0x66>
	} else
	{
		//over sampling by 16
		usartdiv = ((25 * PCLKx) / (4 * BaudRate));
 8000b18:	69fa      	ldr	r2, [r7, #28]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	009a      	lsls	r2, r3, #2
 8000b22:	441a      	add	r2, r3
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2c:	61bb      	str	r3, [r7, #24]
	}

	// Calculate the Mantissa part
	M_part = usartdiv / 100;
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	4a1d      	ldr	r2, [pc, #116]	; (8000ba8 <USART_SetBaudRate+0xe0>)
 8000b32:	fba2 2303 	umull	r2, r3, r2, r3
 8000b36:	095b      	lsrs	r3, r3, #5
 8000b38:	60fb      	str	r3, [r7, #12]

	// place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	011b      	lsls	r3, r3, #4
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]

	// extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2264      	movs	r2, #100	; 0x64
 8000b48:	fb02 f303 	mul.w	r3, r2, r3
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	617b      	str	r3, [r7, #20]

	// calculate the final fractional
	if (pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d00a      	beq.n	8000b74 <USART_SetBaudRate+0xac>
	{
		// OVER8 = 1 , over sampling by 8
		F_part = (((F_part * 8) + 50) / 100) & ((uint8_t) 0x07);
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	3332      	adds	r3, #50	; 0x32
 8000b64:	4a10      	ldr	r2, [pc, #64]	; (8000ba8 <USART_SetBaudRate+0xe0>)
 8000b66:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6a:	095b      	lsrs	r3, r3, #5
 8000b6c:	f003 0307 	and.w	r3, r3, #7
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	e009      	b.n	8000b88 <USART_SetBaudRate+0xc0>

	} else
	{
		// over sampling by 16
		F_part = (((F_part * 16) + 50) / 100) & ((uint8_t) 0x0F);
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	011b      	lsls	r3, r3, #4
 8000b78:	3332      	adds	r3, #50	; 0x32
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <USART_SetBaudRate+0xe0>)
 8000b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b80:	095b      	lsrs	r3, r3, #5
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	617b      	str	r3, [r7, #20]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	609a      	str	r2, [r3, #8]
}
 8000b96:	bf00      	nop
 8000b98:	3720      	adds	r7, #32
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40011000 	.word	0x40011000
 8000ba4:	40011400 	.word	0x40011400
 8000ba8:	51eb851f 	.word	0x51eb851f

08000bac <USART_Init>:
 *
 *  @Note			-	none
 *
 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	// Temporary register
	uint32_t tempreg = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]

	/******************************** Configuration of CR1******************************************/

	// enable the Clock for given USART peripheral
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff feb2 	bl	8000928 <USART_PeriClockControl>

	// enable USART TX and RX engines according to the USART_Mode configuration item
	if (pUSARTHandle->USARTConfig.USART_Mode == USART_MODE_ONLY_RX)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	791b      	ldrb	r3, [r3, #4]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d104      	bne.n	8000bd6 <USART_Init+0x2a>
	{
		// enable the Receiver bit field
		tempreg |= (1 << USART_CR1_RE);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f043 0304 	orr.w	r3, r3, #4
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	e010      	b.n	8000bf8 <USART_Init+0x4c>
	} else if (pUSARTHandle->USARTConfig.USART_Mode == USART_MODE_ONLY_TX)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	791b      	ldrb	r3, [r3, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d104      	bne.n	8000be8 <USART_Init+0x3c>
	{
		// enable the Transmitter bit field
		tempreg |= (1 << USART_CR1_TE);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	e007      	b.n	8000bf8 <USART_Init+0x4c>

	} else if (pUSARTHandle->USARTConfig.USART_Mode == USART_MODE_TXRX)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	791b      	ldrb	r3, [r3, #4]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d103      	bne.n	8000bf8 <USART_Init+0x4c>
	{
		// enable the both Transmitter and Receiver bit fields
		tempreg |= ((1 << USART_CR1_RE) | (1 << USART_CR1_TE));
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f043 030c 	orr.w	r3, r3, #12
 8000bf6:	60fb      	str	r3, [r7, #12]
	}

	// configure the Word length configuration item
	tempreg |= pUSARTHandle->USARTConfig.USART_WordLength << USART_CR1_M;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	7b5b      	ldrb	r3, [r3, #13]
 8000bfc:	031b      	lsls	r3, r3, #12
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]

	// Configuration of parity control bit fields
	if (pUSARTHandle->USARTConfig.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7b9b      	ldrb	r3, [r3, #14]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d104      	bne.n	8000c18 <USART_Init+0x6c>
	{
		// enable the parity control
		tempreg |= (1 << USART_CR1_PCE);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	e00b      	b.n	8000c30 <USART_Init+0x84>

		// enable EVEN parity
		// Not required because by default EVEN parity will be selected

	} else if (pUSARTHandle->USARTConfig.USART_ParityControl == USART_PARITY_EN_ODD)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7b9b      	ldrb	r3, [r3, #14]
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d107      	bne.n	8000c30 <USART_Init+0x84>
	{
		// enable the parity control
		tempreg |= (1 << USART_CR1_PCE);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c26:	60fb      	str	r3, [r7, #12]

		// enable ODD parity
		tempreg |= (1 << USART_CR1_PS);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2e:	60fb      	str	r3, [r7, #12]

	}

	// Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	60da      	str	r2, [r3, #12]

	/******************************** Configuration of CR2******************************************/

	tempreg = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]

	// configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USARTConfig.USART_NoOfStopBits << USART_CR2_STOP;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	7b1b      	ldrb	r3, [r3, #12]
 8000c40:	031b      	lsls	r3, r3, #12
 8000c42:	461a      	mov	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]

	// Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	611a      	str	r2, [r3, #16]

	/******************************** Configuration of CR3******************************************/

	tempreg = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]

	// Configuration of USART hardware flow control
	if (pUSARTHandle->USARTConfig.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	7bdb      	ldrb	r3, [r3, #15]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d104      	bne.n	8000c68 <USART_Init+0xbc>
	{
		// enable CTS flow control
		tempreg |= (1 << USART_CR3_CTSE);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	e010      	b.n	8000c8a <USART_Init+0xde>

	} else if (pUSARTHandle->USARTConfig.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	7bdb      	ldrb	r3, [r3, #15]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d104      	bne.n	8000c7a <USART_Init+0xce>
	{
		// enable RTS flow control
		tempreg |= (1 << USART_CR3_RTSE);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	e007      	b.n	8000c8a <USART_Init+0xde>

	} else if (pUSARTHandle->USARTConfig.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	7bdb      	ldrb	r3, [r3, #15]
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d103      	bne.n	8000c8a <USART_Init+0xde>
	{
		// enable both CTS and RTS Flow control
		tempreg |= ((1 << USART_CR3_CTSE) | (1 << USART_CR3_RTSE));
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000c88:	60fb      	str	r3, [r7, #12]
	}

	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	615a      	str	r2, [r3, #20]

	/******************************** Configuration of BRR(Baudrate register)******************************************/

	// configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USARTConfig.USART_Baud);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4610      	mov	r0, r2
 8000c9e:	f7ff ff13 	bl	8000ac8 <USART_SetBaudRate>
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <USART_SendData>:
 *
 *  @Note			-	This is blocking call
 *
 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;

	// Loop over until "Len" number of bytes are transferred
	for (uint32_t i = 0; i < Len; i++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	e031      	b.n	8000d20 <USART_SendData+0x76>
	{
		// wait until TXE flag is set in the SR
		while ( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE) );
 8000cbc:	bf00      	nop
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2180      	movs	r1, #128	; 0x80
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 f859 	bl	8000d7c <USART_GetFlagStatus>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d0f6      	beq.n	8000cbe <USART_SendData+0x14>

		// check the USART_WordLength item for 9BIT or 8BIT in a frame
		if (pUSARTHandle->USARTConfig.USART_WordLength == USART_WORDLEN_9BITS)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	7b5b      	ldrb	r3, [r3, #13]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d118      	bne.n	8000d0a <USART_SendData+0x60>
		{
			// if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t) 0x01FF);
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000cea:	605a      	str	r2, [r3, #4]

			// check for USART_ParityControl
			if (pUSARTHandle->USARTConfig.USART_ParityControl == USART_PARITY_DISABLE)
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	7b9b      	ldrb	r3, [r3, #14]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d106      	bne.n	8000d02 <USART_SendData+0x58>
			{
				// No parity is used in this transfer. so, 9bits of user data will be sent
				// increment pTxBuffer twice
				pTxBuffer++;
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	e00b      	b.n	8000d1a <USART_SendData+0x70>
			} else
			{
				// Parity bit is used in this transfer . so , 8bits of user data will be sent
				// The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	3301      	adds	r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	e007      	b.n	8000d1a <USART_SendData+0x70>
			}
		} else
		{
			// This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer & (uint8_t) 0xFF);
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	781a      	ldrb	r2, [r3, #0]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]

			// increment the buffer address
			pTxBuffer++;
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	3301      	adds	r3, #1
 8000d18:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < Len; i++)
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d3c9      	bcc.n	8000cbc <USART_SendData+0x12>
		}
	}

	// wait till TC flag is set in the SR
	while ( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC) );
 8000d28:	bf00      	nop
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2140      	movs	r1, #64	; 0x40
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 f823 	bl	8000d7c <USART_GetFlagStatus>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0f6      	beq.n	8000d2a <USART_SendData+0x80>
}
 8000d3c:	bf00      	nop
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <USART_PeripheralControl>:
 *
 *  @Note			-	none
 *
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d106      	bne.n	8000d64 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	60da      	str	r2, [r3, #12]
	} else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 8000d62:	e005      	b.n	8000d70 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	60da      	str	r2, [r3, #12]
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <USART_GetFlagStatus>:
 *
 *  @Note			-	none
 *
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
	if (pUSARTx->SR & FlagName)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <USART_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e000      	b.n	8000d98 <USART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <USART2_Init>:
char msg[1024] = "UART Tx testing...\n\r";

USART_Handle_t usart2_handle;

void USART2_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <USART2_Init+0x3c>)
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <USART2_Init+0x40>)
 8000dac:	601a      	str	r2, [r3, #0]
	usart2_handle.USARTConfig.USART_Baud = USART_STD_BAUD_115200;
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <USART2_Init+0x3c>)
 8000db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db4:	609a      	str	r2, [r3, #8]
	usart2_handle.USARTConfig.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <USART2_Init+0x3c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	73da      	strb	r2, [r3, #15]
	usart2_handle.USARTConfig.USART_Mode = USART_MODE_ONLY_TX;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <USART2_Init+0x3c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	711a      	strb	r2, [r3, #4]
	usart2_handle.USARTConfig.USART_NoOfStopBits = USART_STOPBITS_1;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <USART2_Init+0x3c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	731a      	strb	r2, [r3, #12]
	usart2_handle.USARTConfig.USART_WordLength = USART_WORDLEN_8BITS;
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <USART2_Init+0x3c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	735a      	strb	r2, [r3, #13]
	usart2_handle.USARTConfig.USART_ParityControl = USART_PARITY_DISABLE;
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <USART2_Init+0x3c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <USART2_Init+0x3c>)
 8000dd6:	f7ff fee9 	bl	8000bac <USART_Init>
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000044c 	.word	0x2000044c
 8000de4:	40004400 	.word	0x40004400

08000de8 <USART2_GPIOInit>:

void 	USART2_GPIOInit(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
	GPIO_Handle_t USART_GPIOs;

	USART_GPIOs.pGPIOx = GPIOA;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <USART2_GPIOInit+0x40>)
 8000df0:	607b      	str	r3, [r7, #4]
	USART_GPIOs.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000df2:	2302      	movs	r3, #2
 8000df4:	727b      	strb	r3, [r7, #9]
	USART_GPIOs.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000df6:	2300      	movs	r3, #0
 8000df8:	733b      	strb	r3, [r7, #12]
	USART_GPIOs.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	72fb      	strb	r3, [r7, #11]
	USART_GPIOs.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	72bb      	strb	r3, [r7, #10]
	USART_GPIOs.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 8000e02:	2307      	movs	r3, #7
 8000e04:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	USART_GPIOs.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USART_GPIOs);
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fb05 	bl	800041c <GPIO_Init>

	//USART2 RX
	USART_GPIOs.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000e12:	2303      	movs	r3, #3
 8000e14:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USART_GPIOs);
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff faff 	bl	800041c <GPIO_Init>


}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40020000 	.word	0x40020000

08000e2c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is button GPIO configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <GPIO_ButtonInit+0x54>)
 8000e34:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000e42:	2300      	movs	r3, #0
 8000e44:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fae6 	bl	800041c <GPIO_Init>

	//this is led GPIO configuration
	GpioLed.pGPIOx = GPIOD;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <GPIO_ButtonInit+0x58>)
 8000e52:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000e54:	230c      	movs	r3, #12
 8000e56:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000e60:	2301      	movs	r3, #1
 8000e62:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000e64:	2300      	movs	r3, #0
 8000e66:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 8000e68:	2101      	movs	r1, #1
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <GPIO_ButtonInit+0x58>)
 8000e6c:	f7ff f9ee 	bl	800024c <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 8000e70:	463b      	mov	r3, r7
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fad2 	bl	800041c <GPIO_Init>

}
 8000e78:	bf00      	nop
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40020000 	.word	0x40020000
 8000e84:	40020c00 	.word	0x40020c00

08000e88 <delay>:

void delay(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	e002      	b.n	8000e9a <delay+0x12>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3301      	adds	r3, #1
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <delay+0x28>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d9f8      	bls.n	8000e94 <delay+0xc>
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	0003d08f 	.word	0x0003d08f

08000eb4 <main>:


int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 8000eb8:	f7ff ffb8 	bl	8000e2c <GPIO_ButtonInit>

	USART2_GPIOInit();
 8000ebc:	f7ff ff94 	bl	8000de8 <USART2_GPIOInit>

    USART2_Init();
 8000ec0:	f7ff ff70 	bl	8000da4 <USART2_Init>

    USART_PeripheralControl(USART2,ENABLE);
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	480b      	ldr	r0, [pc, #44]	; (8000ef4 <main+0x40>)
 8000ec8:	f7ff ff3c 	bl	8000d44 <USART_PeripheralControl>

    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000ecc:	bf00      	nop
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <main+0x44>)
 8000ed2:	f7ff fc55 	bl	8000780 <GPIO_ReadFromInputPin>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0f8      	beq.n	8000ece <main+0x1a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000edc:	f7ff ffd4 	bl	8000e88 <delay>

		USART_SendData(&usart2_handle,(uint8_t*)msg,strlen(msg));
 8000ee0:	4806      	ldr	r0, [pc, #24]	; (8000efc <main+0x48>)
 8000ee2:	f7ff f981 	bl	80001e8 <strlen>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4904      	ldr	r1, [pc, #16]	; (8000efc <main+0x48>)
 8000eec:	4804      	ldr	r0, [pc, #16]	; (8000f00 <main+0x4c>)
 8000eee:	f7ff fedc 	bl	8000caa <USART_SendData>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000ef2:	e7eb      	b.n	8000ecc <main+0x18>
 8000ef4:	40004400 	.word	0x40004400
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	20000030 	.word	0x20000030
 8000f00:	2000044c 	.word	0x2000044c

08000f04 <__libc_init_array>:
 8000f04:	b570      	push	{r4, r5, r6, lr}
 8000f06:	4e0d      	ldr	r6, [pc, #52]	; (8000f3c <__libc_init_array+0x38>)
 8000f08:	4c0d      	ldr	r4, [pc, #52]	; (8000f40 <__libc_init_array+0x3c>)
 8000f0a:	1ba4      	subs	r4, r4, r6
 8000f0c:	10a4      	asrs	r4, r4, #2
 8000f0e:	2500      	movs	r5, #0
 8000f10:	42a5      	cmp	r5, r4
 8000f12:	d109      	bne.n	8000f28 <__libc_init_array+0x24>
 8000f14:	4e0b      	ldr	r6, [pc, #44]	; (8000f44 <__libc_init_array+0x40>)
 8000f16:	4c0c      	ldr	r4, [pc, #48]	; (8000f48 <__libc_init_array+0x44>)
 8000f18:	f000 f818 	bl	8000f4c <_init>
 8000f1c:	1ba4      	subs	r4, r4, r6
 8000f1e:	10a4      	asrs	r4, r4, #2
 8000f20:	2500      	movs	r5, #0
 8000f22:	42a5      	cmp	r5, r4
 8000f24:	d105      	bne.n	8000f32 <__libc_init_array+0x2e>
 8000f26:	bd70      	pop	{r4, r5, r6, pc}
 8000f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f2c:	4798      	blx	r3
 8000f2e:	3501      	adds	r5, #1
 8000f30:	e7ee      	b.n	8000f10 <__libc_init_array+0xc>
 8000f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f36:	4798      	blx	r3
 8000f38:	3501      	adds	r5, #1
 8000f3a:	e7f2      	b.n	8000f22 <__libc_init_array+0x1e>
 8000f3c:	08000f64 	.word	0x08000f64
 8000f40:	08000f64 	.word	0x08000f64
 8000f44:	08000f64 	.word	0x08000f64
 8000f48:	08000f68 	.word	0x08000f68

08000f4c <_init>:
 8000f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4e:	bf00      	nop
 8000f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f52:	bc08      	pop	{r3}
 8000f54:	469e      	mov	lr, r3
 8000f56:	4770      	bx	lr

08000f58 <_fini>:
 8000f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5a:	bf00      	nop
 8000f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f5e:	bc08      	pop	{r3}
 8000f60:	469e      	mov	lr, r3
 8000f62:	4770      	bx	lr
